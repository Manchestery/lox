# Makefile for Lox Interpreter
# ============================

# 项目配置
PROJECT_NAME = lox
MAIN_CLASS = com.craftinginterpreters.lox.Lox
AST_PRINTER_CLASS = com.craftinginterpreters.lox.AstPrinter
GENERATOR_CLASS = com.craftinginterpreters.tool.GenerateAst

# 目录配置
SRC_DIR = src
BUILD_DIR = build
TOOL_DIR = src/com/craftinginterpreteres/tool
LOX_SRC_DIR = src/com/craftinginterpreteres/lox

# Java 文件列表
JAVA_FILES = $(wildcard $(LOX_SRC_DIR)/*.java) Expr.java
TOOL_FILES = $(wildcard $(TOOL_DIR)/*.java)

# 编译器配置
JAVAC = javac
JAVA = java
JAVAC_FLAGS = -d $(BUILD_DIR) -cp $(BUILD_DIR)
JAVA_FLAGS = -cp $(BUILD_DIR)

# 默认目标
.PHONY: all clean run test-scanner test-ast help generate-ast

# 显示帮助信息
help:
	@echo "Lox 解释器构建系统"
	@echo "==================="
	@echo "可用目标:"
	@echo "  all          - 编译所有源文件"
	@echo "  clean        - 清理编译输出"
	@echo "  run          - 启动 Lox 解释器 (交互模式)"
	@echo "  run-file     - 运行 Lox 文件 (使用: make run-file FILE=script.lox)"
	@echo "  test-scanner - 测试词法扫描器"
	@echo "  test-ast     - 测试 AST 打印器"
	@echo "  generate-ast - 重新生成 AST 类"
	@echo "  help         - 显示此帮助信息"

# 默认构建所有
all: $(BUILD_DIR) compile

# 创建构建目录
$(BUILD_DIR):
	@echo "创建构建目录..."
	@mkdir -p $(BUILD_DIR)

# 编译所有 Java 文件
compile: $(BUILD_DIR)
	@echo "编译 Java 源文件..."
	$(JAVAC) $(JAVAC_FLAGS) $(JAVA_FILES)
	@echo "编译完成！"

# 编译工具类（用于生成 AST）
compile-tools: $(BUILD_DIR)
	@echo "编译工具类..."
	$(JAVAC) $(JAVAC_FLAGS) $(TOOL_FILES)
	@echo "工具类编译完成！"

# 生成 AST 类
generate-ast: compile-tools
	@echo "生成 AST 类..."
	$(JAVA) $(JAVA_FLAGS) $(GENERATOR_CLASS) .
	@echo "AST 类生成完成！"
	@echo "重新编译项目..."
	@$(MAKE) compile

# 运行 Lox 解释器（交互模式）
run: compile
	@echo "启动 Lox 解释器..."
	$(JAVA) $(JAVA_FLAGS) $(MAIN_CLASS)

# 运行 Lox 文件
run-file: compile
ifdef FILE
	@echo "运行 Lox 文件: $(FILE)"
	$(JAVA) $(JAVA_FLAGS) $(MAIN_CLASS) $(FILE)
else
	@echo "错误: 请指定文件名"
	@echo "使用方法: make run-file FILE=your_script.lox"
endif

# 测试词法扫描器
test-scanner: compile
	@echo "测试词法扫描器..."
	@echo "1 + 2 * 3 - 4" | $(JAVA) $(JAVA_FLAGS) $(MAIN_CLASS)

# 测试 AST 打印器
test-ast: compile
	@echo "测试 AST 打印器..."
	$(JAVA) $(JAVA_FLAGS) $(AST_PRINTER_CLASS)

# 创建测试 Lox 脚本并运行
test-example: compile
	@echo "创建测试脚本..."
	@echo 'print "Hello, World!";' > test.lox
	@echo 'print 1 + 2 * 3;' >> test.lox
	@echo 'print (1 + 2) * 3;' >> test.lox
	@echo "运行测试脚本:"
	@cat test.lox
	@echo ""
	@echo "输出:"
	@$(JAVA) $(JAVA_FLAGS) $(MAIN_CLASS) test.lox || echo "注意：解释器可能尚未完全实现"

# 清理编译产物
clean:
	@echo "清理构建文件..."
	@if exist $(BUILD_DIR) rmdir /s /q $(BUILD_DIR)
	@if exist test.lox del test.lox
	@if exist Expr.java.bak del Expr.java.bak
	@echo "清理完成！"

# 显示项目信息
info:
	@echo "项目信息"
	@echo "========"
	@echo "项目名称: $(PROJECT_NAME)"
	@echo "主类: $(MAIN_CLASS)"
	@echo "源码目录: $(SRC_DIR)"
	@echo "构建目录: $(BUILD_DIR)"
	@echo ""
	@echo "Java 文件:"
	@for %%f in ($(JAVA_FILES)) do @echo "  %%f"

# 检查代码风格（简单版本）
check:
	@echo "检查代码风格..."
	@findstr /R /C:"[ 	]*$$" $(LOX_SRC_DIR)\*.java && echo "发现尾随空格" || echo "无尾随空格"
	@findstr /R /C:"	" $(LOX_SRC_DIR)\*.java && echo "发现制表符" || echo "无制表符"

# 备份项目
backup:
	@echo "创建项目备份..."
	@set backup_name=lox_backup_%date:~0,4%-%date:~5,2%-%date:~8,2%_%time:~0,2%-%time:~3,2%-%time:~6,2%
	@mkdir %backup_name% 2>nul || echo ""
	@xcopy /E /I /Q . %backup_name%\ >nul
	@echo "备份创建完成: %backup_name%"

# 强制重新编译
rebuild: clean all

# 依赖关系
$(BUILD_DIR)/com/craftinginterpreters/lox/%.class: $(LOX_SRC_DIR)/%.java | $(BUILD_DIR)
	$(JAVAC) $(JAVAC_FLAGS) $<

# 防止误删重要文件
.PRECIOUS: $(JAVA_FILES) Makefile